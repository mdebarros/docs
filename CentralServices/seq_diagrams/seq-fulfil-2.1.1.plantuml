@startuml
' declate title
title 2.1.1. Fulfil Handler Consume (Success)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "Fulfil-Topic" as TOPIC_FULFIL
control "Fulfil Event Handler" as FULF_HANDLER
collections "Event-Topic" as TOPIC_EVENT
collections "Position-Topic-dfsp2" as TOPIC_POSITION_DFSP2
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
entity "Transfer DAO" as TRANS_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_FULFIL
    participant FULF_HANDLER
    participant TOPIC_POSITION_DFSP2
    participant TOPIC_EVENT
    participant TOPIC_NOTIFICATIONS
    participant TRANS_DAO
    participant DB
end box

' start flow
activate FULF_HANDLER
group Fulfil Handler Consume (Success)
    alt Consume Single Message
        TOPIC_FULFIL <- FULF_HANDLER: Consume Prepare event message for Payer
        activate TOPIC_FULFIL
        deactivate TOPIC_FULFIL

        break
            group Validate Event
                FULF_HANDLER <-> FULF_HANDLER: Validate event - Rule: type == 'fulfil' && action == 'commit'
            end
        end

        group Persist Event Information
            FULF_HANDLER -> TOPIC_EVENT: Publish event information
	        ref over FULF_HANDLER, TOPIC_EVENT :  Event Handler Consume {9.1.0.} 
        end

        group Retrieve Transfer Details
            FULF_HANDLER -> TRANS_DAO: Request information for the validate checks
            activate TRANS_DAO
            TRANS_DAO -> DB: Fetch from database
            activate DB
            DB --> TRANS_DAO
            deactivate DB
            hnote over DB #lightyellow
                transfer
                ilp
            end note
            FULF_HANDLER <-- TRANS_DAO: Return transfer & ilp
            deactivate TRANS_DAO
        end

        group Validate Fulfil Transfer
            FULF_HANDLER <-> FULF_HANDLER: Check existing transfer
            FULF_HANDLER <-> FULF_HANDLER: Validate fulfilment against condition
            FULF_HANDLER <-> FULF_HANDLER: Validate duplicate check
            FULF_HANDLER <-> FULF_HANDLER: Validate message signature (to be confirmed in future requirement)
        end

        alt Validate successful
            group Persist Transfer State (with transferState='RECEIVED-FULFIL')
                FULF_HANDLER -> TRANS_DAO: Request to persist transfer state
                activate TRANS_DAO
                TRANS_DAO -> DB: Persist transfer state
                activate DB
                deactivate DB
                hnote over DB #lightyellow
                    transferStateChange
                end note
                TRANS_DAO --> FULF_HANDLER: Return success
                deactivate TRANS_DAO
            end

            group Persist fulfilment
                FULF_HANDLER -> TRANS_DAO: Persist fulfilment
                activate TRANS_DAO
                TRANS_DAO -> DB: Persist to database
                activate DB
                deactivate DB
                hnote over DB #lightyellow
                    ilp
                end note
                FULF_HANDLER <-- TRANS_DAO: Return success
                deactivate TRANS_DAO
            end

            group Append to Settlement Window
                note right of FULF_HANDLER #lightgray
                    <color #FF0000>**To be considered**: Retrieve current settlement window from</color>
                    <color #FF0000>Position-Topic (message 1) instead of querying the DB.</color>
                end note
                FULF_HANDLER -> TRANS_DAO: Request to retrieve current/latest transfer settlement window
                activate TRANS_DAO
                TRANS_DAO -> DB: Fetch settlementWindowId
                activate DB
                DB --> TRANS_DAO
                deactivate DB
                hnote over DB #lightyellow
                    settlementWindow
                end note
                FULF_HANDLER <-- TRANS_DAO: Return settlementWindowId to be appended
                deactivate TRANS_DAO

                FULF_HANDLER -> TRANS_DAO: Request to append the transfer to current/latest transfer settlement window
                activate TRANS_DAO
                TRANS_DAO -> DB: Append transfer
                activate DB
                deactivate DB
                hnote over DB #lightyellow
                    settlementWindowIndex
                end note
                FULF_HANDLER <-- TRANS_DAO: Return success
                deactivate TRANS_DAO
                |||
            end

            note right of FULF_HANDLER #yellow
                Message:
                {
                    id: <ID>,
                    from: <transferHeaders.FSPIOP-Source>,
                    to: <transferHeaders.FSPIOP-Destination>,
                    type: application/json,
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: position,
                            action: commit,
                            createdAt: <timestamp>,
                            state: {
                                status: "success",
                                code: 0
                            }
                        }
                    }
                }
            end note
            FULF_HANDLER -> TOPIC_POSITION_DFSP2: Route & Publish Position event for Payee
            activate TOPIC_POSITION_DFSP2
            deactivate TOPIC_POSITION_DFSP2
        else Validate Fulfil Transfer not successful
            break
                FULF_HANDLER -> TOPIC_NOTIFICATIONS: Route & Publish Notification event for Payee
                activate TOPIC_NOTIFICATIONS
                deactivate TOPIC_NOTIFICATIONS
            end
        end

    else Consume Batch Messages
        note left of FULF_HANDLER #lightblue
            To be delivered by future story
        end note
    end
end
deactivate FULF_HANDLER
@enduml
