@startuml
' declate title
title 2.1.2. Position Handler Consume (Success)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "Position-Topic-dfsp2" as TOPIC_POSITION_DFSP2
control "Position Event Handler" as POS_HANDLER
collections "Transfer-Topic" as TOPIC_TRANSFERS
collections "Event-Topic" as TOPIC_EVENT
entity "Transfer DAO" as TRANS_DAO
entity "Position DAO" as POS_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_POSITION_DFSP2
    participant TOPIC_EVENT
    participant POS_HANDLER
    participant TOPIC_TRANSFERS
    participant TRANS_DAO
    participant POS_DAO
    participant DB
end box

' start flow
activate POS_HANDLER
group Position Handler Consume (Reject)
    alt Consume Single Message
        TOPIC_POSITION_DFSP2 <- POS_HANDLER: Consume Position event message for Payer
        activate TOPIC_POSITION_DFSP2
        deactivate TOPIC_POSITION_DFSP2

        break
            group Validate Event
                POS_HANDLER <-> POS_HANDLER: Validate event - Rule: type == 'position' && action == 'commit'
            end
        end

        group Persist Event Information
            POS_HANDLER -> TOPIC_EVENT: Publish event information
	        ref over POS_HANDLER, TOPIC_EVENT :  Event Handler Consume {9.1.0.} 
        end

        group Retrieve Current Transfer Details
            POS_HANDLER -> TRANS_DAO: Request to retrieve expirationDate & transferStateId
            activate TRANS_DAO
            TRANS_DAO -> DB: Fetch from database
            activate DB
            DB --> TRANS_DAO
            deactivate DB
            hnote over DB #lightyellow
                transfer
                transferState
            end note
            note left of DB #lightgray
                **To be considered**: Lock the DB record
                to avoid processing by Timeout Handler.
            end note
            POS_HANDLER <-- TRANS_DAO: Return transfer.expirationDate & transferState.transferStateId
            deactivate TRANS_DAO
        end

        break
            group Validate Transfer
                POS_HANDLER <-> POS_HANDLER: Validate transfer expiration - Rule: Date.now() < expirationDate
                POS_HANDLER <-> POS_HANDLER: Validate transfer state - Rule: **transferState**Id corresponds to 'RECEIVED-FULFIL'
                note right of POS_HANDLER #lightgray
                    **Condition**: Continue only if both equal to true, break otherwise
                    **Note**: All timestamps should be transformed and stored as UTC (GMT 0)
                end note
            end
            note right of POS_HANDLER #lightgray
                **Note**: Notifications in break case scenario are being handled by
                Transfer Timeout Handler.
            end note
        end

        group Decrement Payee Position (DFSP2)
            POS_HANDLER -> POS_DAO: Request to decrement latest position for Payee
            activate POS_DAO
            POS_DAO -> DB: Persist decrement to DB
            activate DB
            deactivate DB
            hnote over DB #lightyellow
                transferPosition
            end note
            POS_DAO --> POS_HANDLER: Return success
            deactivate POS_DAO
        end

        group Persist Transfer State (with transferState='COMMITTED')
            POS_HANDLER -> TRANS_DAO: Request to persist transfer state
            activate TRANS_DAO
            TRANS_DAO -> DB: Persist transfer state
            activate DB
            deactivate DB
            hnote over DB #lightyellow
                transferStateChange
            end note
            TRANS_DAO --> POS_HANDLER: Return success
            deactivate TRANS_DAO
        end

        note right of POS_HANDLER #yellow
            Message:
            {
                id: <ID>,
                from: <transferHeaders.FSPIOP-Source>,
                to: <transferHeaders.FSPIOP-Destination>,
                type: application/json,
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: transfer,
                        action: commit,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        POS_HANDLER -> TOPIC_TRANSFERS: Publish Transfer event
        activate TOPIC_TRANSFERS
        deactivate TOPIC_TRANSFERS

    else Consume Batch Messages
        note left of POS_HANDLER #lightblue
            To be delivered by future story
        end note
    end
end
deactivate POS_HANDLER
@enduml
