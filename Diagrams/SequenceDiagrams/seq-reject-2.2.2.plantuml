/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 2.2.2. Position Handler Consume (Reject)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "topic-transfer-position" as TOPIC_TRANSFER_POSITION
control "Position Event Handler" as POS_HANDLER
collections "Transfer-Topic" as TOPIC_TRANSFERS
collections "Event-Topic" as TOPIC_EVENT
entity "Transfer DAO" as TRANS_DAO
entity "Position DAO" as POS_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_TRANSFER_POSITION
    participant TOPIC_EVENT
    participant POS_HANDLER
    participant TOPIC_TRANSFERS
    participant TRANS_DAO
    participant POS_DAO
    participant DB
end box

' start flow
activate POS_HANDLER
group Position Handler Consume (Reject)
    alt Consume Single Message
        TOPIC_TRANSFER_POSITION <- POS_HANDLER: Consume Position event message for Payer
        activate TOPIC_TRANSFER_POSITION
        deactivate TOPIC_TRANSFER_POSITION

        break
            group Validate Event
                POS_HANDLER <-> POS_HANDLER: Validate event - Rule: type == 'position' && action == 'reject'
            end
        end

        group Persist Event Information
            POS_HANDLER -> TOPIC_EVENT: Publish event information
	        ref over POS_HANDLER, TOPIC_EVENT :  Event Handler Consume {[[https://github.com/mojaloop/docs/blob/master/CentralServices/seq_diagrams/seq-event-9.1.0.svg 9.1.0.]]}
        end

        group Retrieve Current Transfer Details
            POS_HANDLER -> TRANS_DAO: Request to retrieve expirationDate & transferStateId
            activate TRANS_DAO
            TRANS_DAO -> DB: Fetch from database
            activate DB
            DB --> TRANS_DAO
            deactivate DB
            hnote over DB #lightyellow
                transfer
                transferState
            end note
            POS_HANDLER <-- TRANS_DAO: Return transfer.expirationDate & transferState.transferStateId
            deactivate TRANS_DAO
        end

        break
            group Validate Transfer
                POS_HANDLER <-> POS_HANDLER: Validate transfer expiration - Rule: Date.now() < expirationDate
                POS_HANDLER <-> POS_HANDLER: Validate transfer state - Rule: **transferState**Id corresponds to 'RESERVED'
            end
        end

        group Decrement Payer Position (DFSP1)
            POS_HANDLER -> POS_DAO: Request to decrement latest position for Payer
            activate POS_DAO
            POS_DAO -> DB: Persist decrement to DB
            activate DB
            deactivate DB
            hnote over DB #lightyellow
                transferPosition
            end note
            POS_DAO --> POS_HANDLER: Return success
            deactivate POS_DAO
        end

        group Persist Transfer State (with transferState='ABORTED')
            POS_HANDLER -> TRANS_DAO: Request to persist transfer state
            activate TRANS_DAO
            TRANS_DAO -> DB: Persist transfer state
            activate DB
            deactivate DB
            hnote over DB #lightyellow
                transferStateChange
            end note
            TRANS_DAO --> POS_HANDLER: Return success
            deactivate TRANS_DAO
        end
    
        note right of POS_HANDLER #yellow
            Message:
            {
                id: <ID>,
                from: <transferHeaders.FSPIOP-Source>,
                to: <transferHeaders.FSPIOP-Destination>,
                type: application/json,
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: transfer,
                        action: reject,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        POS_HANDLER -> TOPIC_TRANSFERS: Publish Transfer event
        activate TOPIC_TRANSFERS
        deactivate TOPIC_TRANSFERS

    else Consume Batch Messages
        note left of POS_HANDLER #lightblue
            To be delivered by future story
        end note
    end
end
deactivate POS_HANDLER
@enduml
